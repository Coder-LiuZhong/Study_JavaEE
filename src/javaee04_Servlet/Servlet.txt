Servlet的理解
	就是一Java程序，运行在Web服务器，用于接收和响应客户端的http请求；
	Servlet是SUN公司基于Java技术的一个开发动态资源支持的规范，以接口的形式出现，最终的实现类与服务器有关；
	Servlet是一种特殊的Java类，运行时服务端/容器中，接收每一个客户端的请求并响应，尊循HTTP协议；
	不属于javase部分，属于javaee部分，JDK查不到了，得用servlet的JDK；

Tomcat调用servlet	
	程序员编写的Servlet其实是供Tomcat容器中的Servlet引擎来处理的类，不能独立运行，引擎里有main方法来调用；tomcat里面还有JSP引擎；
	对Servlet的每一次访问请求都会导致servlet引擎调用一次servlet的service方法；
	每次访问引擎都会产生新的对应的HttpServletRequest和HttpServletResponse对象对应传入到service方法，方法里再根据情况调用doXxxx()方法；

不用工具手动创建servlet
	在原来的环境变量classpath后面新增servlet相关的类jar包，因为要用到这些类；JDK那节我们学到，这里设置的class都可以直接被调用；
		set classpath=%classpath%;E:\apache-tomcat-7.0.40\lib\servlet-api.jar
	Tomcat运行的是class文件的字节码，所以servlet源文件编译成class文件后放到WEB-INF下面的classes文件夹下

实现Servlet接口，里面的方法一一实现
	GenericServlet是Servlet子类;HttpServlet继承GenericServlet；HttpServlet才是我们最终要用的servlet；
	因为Servlet是接口，它里面的方法得一一实现，GenericServlet是继承类，只需要调用相应的类就可以了，而我们web应用大多是http传输，所以用HttpServlet
	HttpServlet已经覆写service()方法，程序员无需再次覆写，只需覆写doXxxx()方法，这样就相当于复写了service()方法
	导入源码，HttpServletRequest按住ctrl建，导入apache-tomcat-7.0.4-src.zip，注意是src的，它里面包含servlet的类文件等

MyEclipse新建Servlet
	如果是在链接上传参数，那就是get方式，就勾选doget();
	如果是表单形式传参数，就用post();
	在doxx中做出输出
	next后是设置xml，我们不需要手动去web.xml里面设置了；第二个要填的是url-pattern;

 如果需要输出中文，需要在Servlet中如下设置:
	//服务端通知浏览器以指定的编码方式来显示中文
	response.setContentType("text/html;charset=UTF-8");
	response.getWriter().write("欢迎学习JavaServlet程序");	
	浏览器--查看--编码，该成utf-8;

配置web.xml，通过解析器反射一下
	先写servlet，再写web.xml配置servlet如何被外界访问
	mapping里的name和servlet里的类名要一致
	url-pattern 斜杠开头
	  <servlet>
		<servlet-name/>	
		<servlet-class/>
	  </servlet>
	  <servlet-mapping>
		<servlet-name/>
		<url-pattern/>
	  </servlet-mapping>
	  
Servlet工作原理和生命周期
  	  0）浏览器链接输入，通过http传输，请求头中封装好了我们要访问的主机和端口，电信通过DNS(域名和ip地址对应的数据库)找到主机；
	  1）当浏览器第一次访问时，服务器会根据连接后接的东东在web.xml文件中找对应的url-pattern，然后找到该Servlet的全路径<servlet-class>， 内部自动进行反射。
	  2）调用init()为Servlet作初始化工作，它在servlet的生命周期里面只会被调用一次；
	  3）每次访问都调用doXxxxx()为浏览器响应
	  4）如果浏览器再次访问相同的Servlet，直实现从服务端维护的Servlet实例集合中取得对应的实现，为浏览器响应；就是说第一次访问已经创建实例了，以后就直接访问，不要新建；
	  5）同一个Servlet实例，在服务端只有一个；在服务器里专门有个地方存放这些实例集合；
	  6) 服务器在决定销毁Servlet实例之前，调用destory()方法，每个Servlet实例只会调用一次，在重新部署情况下 ；重新部署，或者服务器停止的时候就会调用这个方法；
    
通过在web.xml文件中配置代码，让Servlet在部署时就创建
	如果在servlet中配置了一个load-on-startup,那么WEB应用程序在启动时，就会装载并创建servlet的实例对象、以及调用servlet对象的init()方法。
    <servlet>
      <servlet-name>Demo21</servlet-name>
      <servlet-class>cn.itcast.web.servlet.Demo21</servlet-class>
      <load-on-startup>1</load-on-startup>
  	</servlet>   
	数字小的先加载，数据大的后加载，最小为0（有访问的时候才创建实例），如果为负数和没有设置一样，需要在浏览器第一次访问时创建；
	用途：我们可以为web项目写一个InitServlet，配置为启动时候装载，为整个web应用创建必要的数据库表和数据；

url-pattern为/的servlet是一个缺省的servlet，用于处理当前web应用下，访问路径错误的请求;任何web服务端都有一个缺省的servlet来处理;
当访问Tomcat服务器中的某个静态HTML文件和图片时，实际上是访问这个缺省的Servlet;
 在conf/web.xml中，注册了一个org.apache.catalina.servlets.DefaultServlet的servlet，这个设置为了缺省，url-pattern为"/";
    
线程安全
	    产生线程安全条件如下：
		a)单例	   &&		b)实例变量	   &&    c)实例变量进行修改操作
    Servlet是单例，每个线程会共享同一个Servlet的实例变量，如果实例变量有变化操作，就会不安全，所以要对敏感数据加锁；
    	通过加锁的方式，对敏感数据块进行代码同步(正道)，但是也会造成线程的等待
    	所以尽量不要在doxx外面定义变量，因为servlet是单例，会被多个线程访问；
    如果你实现SingleThreadModel来解决线程安全有二个不足之处：
	a）SingleThreadModel接口的值与web服务器最多接收的线程数有关，可能会出现大值变小值的情况；就是说tomcat有个最大连接线程的限制
	b）SingleThreadModel接口如果发现某个线程正在占用该Servlet实例，会自动创建一个新的Servlet实例为浏览器服务，
	   这就违背了Servlet单例的原则；再有，这东西过时了，不会用了；
   
ServletConfig对象
  1)想让当前Servlet读取一些在web.xml文件配置的初始化参数，可以使用ServletConfig对象，它是Servlet运行时的配置对象；
  		config.getInitParameter("tel");
  		Enumeration<String> enums = config.getInitParameterNames();
  2)init(ServletConfig)方法由Web容器调用，调用时，会传入与容器相关的ServletConfig接口的实现    
	好处：	不需要改servlet代码，只需要改xml里面配置的参数就可以了，方便；
    
ServletContext对象
  1)ServletContext对象让所有servlet共享
  	在web应用中，它由服务器创建，只有唯一一个对象；this.getServletContext()得到;被所有的servlet共享，相当于一个域，除非重启服务器；
	存ServletContext.setAttribute(String,Object):	void
	取ServletContext.getAttribute(String):			Object  
  2)读取xml文件中的<context-param>，被所有servlet被共享；context2.getInitParameter("email")
  3)跳转指定页面	context.getRequestDispatcher("/Servlet/servletcontext_success.html")   
  4)读取文件 context.getResourceAsStream("/doc/demo.properties")		返回流的形式
  			context.getRealPath("/images/中文名字图片.gif")			返回文件的形式

关于路径的问题
  1)二种加载方式的区别？
    服务端	
    ServletContext方式：
		1)资源的文件的位置任意
        2)加载文件时，只会以流的方式读取，不会一次性加载全部;
        3)/表示当前web应用，即day06

     类加载器方式：
     	Class clazz = this.getClass();		ClassLoader cl = clazz.getClassLoader();	cl.getResourceAsStream()
		1)资源文件的位置只能放置类路径下，即IDE工具的src目录下；
        2)加载文件时，会一次性加载全部文件
        3)/表示当前/WEB-INF/classes/
    
   2)有关/的问题？
     物理硬盘路径使用\[window系统]
     网络路径使用/
     如果/表示客户端路径的话，表示tomcat/webapps/目录    
    
HttpServletResponse
  1)web容器会传入与web容器相关的HttpServletRequest和HttpServletResponse对象的实现
  2)每次浏览器请求，web容器会创建新的请求和响应对象，这二个对象的生命周期仅限于web容器内
  3)对于字节方式来说，输出数字，respnse会编查ISO8859-1编码表，将码表的中的数字对应的字符取出来显示，即遇数字转字符
  4)如果要输出数字，提前将数字转化成字符串
  5)对于字符方式来说，可以直接输出数字
  6)将中文转成字节数组时，查UTF-8码表，如果不写的话，默认查ISO8859-1码表  
  7)以字符方式输出中文，提前设置编码方式；以字节方式输出中文，提前设置转化编码方式
		字符：	
			response.getOutputStream().write("中国".getBytes("UTF-8"));
		字节：
			response.setContentType("text/html;charset=UTF-8");
			response.getWriter().write("美国");
   8)HTML中的所有<meta/>标签，类似于response.setHeader()，目的是通知浏览器以特定的方式显示页面的信息
   9)重定向是客户端和服务端的共同行为，
     response.sendRedirect("/day06/message.html")其中/表示webapps目录   
    
HTML中的所有<meta/>标签，类似于response.setHeader()，目的是通知浏览器以特定的方式显示页面的信息   
    
重定向是客户端和服务端的共同行为，
     response.sendRedirect("/day06/message.html")其中/表示webapps目录      
	 浏览器第一次发送请求后，服务端要它重定向，就是告诉浏览器再访问一次，这次直接访问网页文件； 

Response输出	 
	getOutputStream和getWriter方法分别用于得到输出二进制数据、输出文本数据的ServletOuputStream、Printwriter对象。
	以字符或字节方式输出内容的话，只能使用其中一种
	响应头会以叠加的方式设置，在相同的情况下，后者起决定作用；
		叠加response.setContentType("text/html;charset=UTF-8");
			response.setContentType("text/html;charset=GBK");
		GBK起作用；
	在没有关闭流的情况下，web容器帮你自动关闭所有从response中取得IO流；注意只是response得到的流才能自动关闭；

Web资源
	服务器能够返回的一切东西都算web资源；具体点就是跟网页相关的；
	静态资源：html,js,css;    静态资源其实也要用到servlet，只不过Tomcat里面已经定义好了一个DefaultServlet; 
	动态资源：servlet,jsp;