表数据的CRUD操作	
	insert into student(sid,sname,sex,age)values(1,'zhangsan',1,23);         
		-- 插入数据
	insert into student values(2,'lisi',1,24);         
		-- 简单写法；如果插入的是全列名的数据，表名后面的列名可以省略；但如果是插入的部分列的话，不能用这个简单写法；
	insert into student values
		(1,'zhangsan',1,23),
		(3,'wangwu',1,21),
		(4,'zhaosi',1,26);    
		-- 批量插入；效率比一条条插入的效率要好，毕竟涉及的关键字少一些，省了一些insert into...; 
---------------------------------------------------------------------------------------------------------------------
		
	delete from student where sid=10;       -- 删除一条数据
	delete from student;                    -- 没有指定的条件，会将表里的数据一条条都删除
	
	delete和truncate的区别
	   delete：	 DML 一条一条删除表中的数据；表里面的数据比较少，它的效率高些；
	   truncate：DDL 先删除表再重建表；表里面数据比较多，它的效率高些；   
	   drop：	         删除表。表结构也删除了；delete是一条条删，表结构还在；
	
---------------------------------------------------------------------------------------------------------------------
	
	update student set sname='李四' where sid=5;    --将sid为5的名字改为李四；如果参数是字符串，日期要加上单引号；
	update student set sname='李四'，sex=0;         --没有where条件所有的记录都被修改了； 
	
---------------------------------------------------------------------------------------------------------------------
	编写顺序		select..from..where..group by..having..order by  
	执行顺序        from..where..group by..having..select(控制显示)..order by(显示的结果排序)     	   

	select * from product;
	select pname,price from product;								
	select p.pname,p.price from product as p;   					
	select pname as 商品名称, price as 商品价格 from product;    		-- as关键字是可以省略的
	
	select distinct price from product;               -- distinct 去重
	select * from product where cno in (1,3,5);       -- in在某个范围内获得值
	
	select * from product where price>60 and price<100;     -- >、>=、<、<=、=、!=(非标准sql语法)、<>(表中sql语法)
	select * from product where price between 60 and 100;   -- between...and...   跟上面一样
	select * from product where price<35 or price>100;      -- or
	select * from product where sname is not null;          -- is null    is not null
	
	--运算查询
	select *, price*1.5 as 折后价 from product;              -- 仅仅是在查询结果上做了运算；
	select sum(price) from product;                         -- 聚合函数： sum()求和    avg()平均值    count()统计数量    max()最大值   min()最小值;   
	
	--模糊查询
	select * from product where pname like '_熊%';          -- _代表一个字符
	select * from product where pname like '%饼%';          -- %代表多个字符
	
	--排序查询
	select * from product order by price;             		-- asc 升序； desc降序，默认
	
	--分组查询
	select cno,count(*) from product group by cno;
	select con,avg(price) from product group by cno having avg(prive)>60;   --分组后，商品平均价格>60; having 条件过滤，可以接聚合函数，出现在分组之后；
---------------------------------------------------------------------------------------------------------------------
