数据库连接池
	创建和管理连接
		每个Java程序调用执行数据库DB，都要创建一个连接Connection对象，这样程序一多就比较消耗性能，时间也有点久。
	
	于是就先弄一个池子，一开始就对数据库创建很多个连接，Java程序要用就找这个池子，用完了就放回去，不然池子就空了。
	连接超过池子一开始就有的连接数就会自动扩容，额外增加3-5个，不过池子也有最大的存放数，再超过那就等其他连接释放回来再用。
	
	一开始现在内存中开辟一块空间（集合） ， 一开先往池子里面放置 多个连接对象。 
	后面需要连接的话，直接从池子里面去。不要去自己创建连接了。  
	使用完毕， 要记得归还连接。确保连接对象能循环利用。
	
	sun公司提出来的，发布了一个连接的规范，即接口，DataSource
-------------------------------------------------------------------------------------------------------------------
创建连接池
	MyDataSource
	
 * 问题： 
 * 		Sun公司针对数据库连接池定义了一套规范。 
 * 			但是需要额外记住 addBack方法，它不在规范里。
 * 		MyDataSource对象需要是单例
 *			不然可以new很多咯
 * 		无法面向接口编程。
 * 			以前 
 * 			UserDao dao = new UserDaoImpl();
 * 			dao.insert();
 * 			现在不能
 * 			DataSource dataSource = new MyDataSource();
 * 			dataSource.addBack()
 * 			因为接口里面没有定义addBack方法
 * 		由于多了一个addBack 方法，所以使用这个连接池的地方，需要额外记住这个方法，并且还不能面向接口编程。
 *  	我们打算修改Connection接口中的那个close方法。  原来的Connection对象的close方法，是真的关闭连接。 
 *     		打算修改这个close方法，以后在调用close， 并不是真的关闭，而是归还连接对象。
 * 
 * 如何扩展某一个方法?
 * 原有的方法逻辑，不是我们想要的。 想修改自己的逻辑
 *		1. 直接改源码  无法实现。
 *		2. 继承， 必须得知道这个接口的具体实现是谁。 
 *		3. 使用装饰者模式。 
 *		4. 动态代理模式(先不讲)
-------------------------------------------------------------------------------------------------------------------

 装饰者模式
	当处理一件事有更加好的办法的时候，可以创造一个类(例如这里的WaitressWrap)
   	把原来的类对象(Waitress)传进去，然后在新类里提供更好的功能，再由外界调用；
   	
 面向接口编程的好处
 	JDBC规范的好处，MySQL、Oracle等都按JDBC来写实现类，调用数据库就不用去关注各个数据库各自是怎么实现的，用JDBC固定的方法即可。
 	还有的情况：技术组长安排任务，直接把UserDao接口写好，里面规定方法接口，你们下面的人怎么实现他不管，你按照他规定的接口方法去实现就行
 	
-------------------------------------------------------------------------------------------------------------------

连接池还有很多的功能需要完善的，平时开发中很少会自己去写一个连接池出来。
别人写了拿过来用就行了，开源的。
	DBCP
		导入jar文件
			commons-dbcp-1.4.jar	
			commons-pool-1.5.6.jar		
		可以使用配置文件方式
			dbcpconfig.properties里面的注释看看就行，没必要深究，视频都没讲
		
	C3P0(企业中用的多)
		c3p0-0.9.1.2.jar
		运行，发现控制台报错是红色的，因为C3P0里面会有打印的操作
			我们平时是用System.out.println(); 黑色
			这里是用的System.err.println();  它打印的是红色的，
		支持两种配置文件
			.properties
			c3p0-config.xml		一般用这个
				dataSource.setDriverClass("com.mysql.jdbc.Driver");    set后面的那些DriverClass要跟xml里面的driverClass、jdbcUrl等对应

-------------------------------------------------------------------------------------------------------------------
DBUtil
	简化了我们的CRUD ， 里面定义了通用的CRUD方法。 
	引入jar：	commons-dbutils-1.4.jar
	
	ResultSetHandler 常用的实现类
		以下两个是使用频率最高的
		BeanHandler,  		查询到的单个数据封装成一个对象
		BeanListHandler, 	查询到的多个数据封装 成一个List<对象>
------------------------------------------
		ArrayHandler,  		查询到的单个数据封装成一个数组
		ArrayListHandler,  	查询到的多个数据封装成一个集合 ，集合里面的元素是数组。 
		MapHandler,  		查询到的单个数据封装成一个map
		MapListHandler,		查询到的多个数据封装成一个集合 ，集合里面的元素是map。 
------------------------------------------ 少用
		ColumnListHandler
		KeyedHandler
		ScalarHandler
-------------------------------------------------------------------------------------------------------------------
