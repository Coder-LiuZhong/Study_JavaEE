什么是协议		双方交互、通讯时，遵守的一种规则；
HTTP协议			客户端和服务端都遵守的规定：	客户端访问服务端，要带上什么，服务端返回数据的时候，要带上什么；

======================================================================================================================================
DNS
	Domain Name Service：电信内部的一个映射关系：域名(www.xx.com) 对应  IP地址(192.168.0.5);
		例如我们输入网址www.163.com，电信公司根据数据库里的域名和IP地址映射关系找到地址，才能访问，如果你没缴费，电信就不让你查这个数据库；
		有些访问不到，电信给你个114，特么打广告的；
	在查询DNS之前，先查看本地操作系统对应的HOSTS文件，是否能找到对应的IP，如果能找到，不会查DNS了，只有在查找不到的情况下，再连网找DNS服务器;
    	例如域名localhost在hosts文件里面有对应的IP地址127.0.0.1;		
    	我的谷歌账户经常登录不上，就是地址被墙了，得在hosts文件里面设置代理服务器；
    	hosts文件地址：C:\Windows\System32\drivers\etc;
        我们平时在家联网的时候要输入的是DNS服务器地址；
    	
	CS结构：程序和数据分离在不同的端
	BS结构：程序和数据绑定在服务端
	安卓是客户端，web是服务端；
======================================================================================================================================
HTTP
	超文本的传输协议，基于TCP/UDP协议(底层);			用于定义web浏览器（客户端）与web服务器（服务端）之间交换数据的过程；
		HTTP是学习JavaWeb开发的基石，不深入了解Http协议，就不能说掌握了WEB开发，更无法管理和维护一些复杂的web站点；
		两个版本： HTTP/1.0(断开连接；一次用户请问，服务端响应后立即断开)
				  HTTP/1.1(保持连接；一次请求，服务端相应后会保持一定时间，在该一定时间后，服务端可以再次请求)
	HttpWatch工具
		主要ie要是32位的才能看到插件：C:\Program Files (x86)\Internet Explorer
		直接安装就可以，只能在IE和火狐中看到插件；先要在IE中显示菜单栏，然后找到工具，里面就有httpwatch选项；
		先打开Tomcat,在IE中打开插件，Record开始，输入http://localhost：8081;
		Stream选项卡，左边是请求的，右边是响应的；
======================================================================================================================================
HTTP协议特点
	  1)客户端->服务端(请求request)有三部份
		a)请求行											GET / HTTP/1.1	(通过GET访问主机的根路径/，采用http1.1协议)
		b)请求头											Accept: text/html, application/xhtml+xml, */*等
		c)请求体，请求的内容，如果没有，就是空白字符  		表单提交的时候，要传递的那些信息；（post方式才有，get方式空白，参数都在请求的资源链接后）
	  2)服务端->客户端(响应response)有三部份
		a)响应行											想让服务器知道何种行为，浏览器只能通过请求头的方式来设置
		b)响应头											想让浏览器有何种行为，服务端只能通过响应头的方式来设置
		c)响应的内容，如果没有，就是空白字符  		        servlet输出到响应体
	
HTTP请求头和响应头含义，HttpWatch可以看到
	1)请求(客户端->服务端[request])				一般都是带一些信息告诉服务器；			服务器代码中用response.setHeader()来设置如下的内容
		
	    GET /books/java.html HTTP/1.1							请求行：(请求的方式) (请求的目标资源) (请求采用的协议和版本号)	
	    
	       以下是请求头
	    Accept: 			*/*									(告诉服务端，客户端所能接收的资源类型，这里是不限)(text/html,image/*; /前面是文字、图片，后面是对应要求的类型，如文本只能是html格式，图片可以所有图片格式)
	    Accept-Encoding: 	gzip, deflate						(告诉服务端，客户端能接收的压缩数据的类型)
	    Accept-Language: 	en-us								(告诉服务端，客户端接收的语言类型)
	    Connection: 		Keep-Alive							(维护客户端和服务端的连接关系，这是1.1的特点)
	    Cookie													(带给服务端，客户端暂存的服务端的信息，后面详细讲解)
	    Host: 				localhost:8081						(连接的目标主机和端口号)
	    User-Agent: 		Mozilla/4.0							(告诉服务端，客户端版本号以及内核名称；由此能判断是手机端还是PC端，能让服务端返回对应的界面)
	    Date: 				Tue, 11 Jul 2000 18:23:51 GMT		(客户端请求服务端的时间，httpwatch里，在右边框框才能看到)
	    If-Modified-Since: 	Tue, 11 Jul 2000 18:23:51 GMT		(客户端缓存时间，网页浏览后在C:\Users\liuzhong\AppData\Local\Microsoft\Windows\Temporary Internet Files中的保留时间，这个文件夹中截止日期是无的文件永远都不会被系统自动删掉；) 
	    Referer: 			http://localhost/links.asp			(来于哪里；真正请求的地址路径，全路径)
	    Content-Type:       application/x-www-form-urlencoded	(提交的数据类型，经过urlencoding编码的form表单的数据)
	    Content-Length：	    31									(数据长度)(post方式请求才会有)
	    Cache-Control：		no-cache							(对缓存的控制，了解就行)
	
		firstname=zhangsan&lastname=sansan						请求体：浏览器真正发送给服务器的数据：key-value形式；多个数据用&连接，这样服务器解析起来也简单；表单提交的时候，要传递的那些信息就是；
		
	2)响应(服务端->客户端[response])				服务器反馈给浏览器
	    HTTP/1.1 200 OK			相应行：(响应采用的协议和版本号) (状态码) (描述信息，对应前面的状态码)
			    500（服务端异常：客户端请求的资源，服务端存在，但在执行时出错）应该是服务器的代码有问题；
			    403（for biddern：拒绝）
			    404（Not Found：客户端请求的资源，服务端找不到）
			    405（本身请求是get请求，但未在servlet内提供对应的doGet()方法, post也是类似）
			    302（重定向;客户端请求服务端，但服务端没有对应的资源，服务端要客户端再次请求找其它的服务端，即客户端二次请求） 
			    307（转发;客户端请求服务端，但服务端没有对应的资源，服务端自行再次请求找其它的服务端，即客户端一次请求）
			    304（优化;客户端请求服务端，此时客户端缓存中有，无需再从服务端下载新的内容,服务端叫客户端自行找缓存）
			    
		以下是相应头
	    Server:					apache tomcat						(告诉客户端，服务器用的是什么类型，这里是Tomcat)
	    Content-Type: 			text/html; charset=GB2312			(服务端发送的类型及采用的编码方式，返回网页文件；返回个图片image/jpeg，demo3)
	    Location: 				http://www.baidu.com				(服务端需要客户端访问的页面路径，服务器要浏览器重定向会给个地址，demo1) 
	    Content-Language: 		zh-cn								(告诉浏览器，服务端发送的语言类型) 
	    Content-Encoding: 		gzip								(告诉浏览器，服务端能够发送压缩编码类型，demo2) 
	    Content-Length: 		80									(告诉浏览器，服务端发送的压缩数据的长度，demo2) 
	    Last-Modified: 			Tue, 11 Jul 2000 18:23:51 GMT		(服务端工作人员对该资源最后修改的时间)
	    Refresh: 				1;url=http://www.it315.org			(服务端要求客户端1秒钟后，刷新，然后访问指定的页面路径，demo5)
	    Content-Disposition: 	attachment; filename=aaa.zip		(服务端要求客户端以下载文件的方式打开该文件，demo4)
	    Transfer-Encoding: 		chunked								(分块传递数据到客户端）  
	    Set-Cookie:				SS=Q0=5Lb_nQ; path=/search			(服务端发送到客户端的暂存数据)
	    Expires: 				-1	//3种							(服务端禁止客户端缓存页面数据，demo6)
	    Cache-Control: 			no-cache							(服务端禁止客户端缓存页面数据)  
	    Pragma: 				no-cache							(服务端禁止客户端缓存页面数据)   
	    Connection: 			close(1.0)/(1.1)Keep-Alive			(维护客户端和服务端的连接关系)  
	    Date: 					Tue, 11 Jul 2000 18:23:51 GMT		(服务端响应客户端的时间)

2)常用的两种提交方式
    a)GET
    http://localhost:8081/day05/servlet?username=liuzhong&password=123456(带参数的就是get，后面跟的密码是明文)
	特点：请求参数无论多少，都会根着URL后传递到服务端，以明文方式传递
	      GET方式传递有大小限制，数据容量不超过1k
	      GET方式传递信息不安全（明文嘛）	
    b)POST
	特点：请求参数无论多少，都不会根着URL后传递到服务端，而是以参数形式在请求体中传递到服务端
	      POST方式传递无大小限制，因为以流的方式传递。例如文件下载；
	      POST方式传递信息相对安全
	   
Web常用的编号
	100-199		成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程；
	200-299		表示成功接收请求并已经完成整个处理过程
	300-399		为完成请求，客户需要进一步细化请求
	400-499		客户端请求有错误，常用404
	500-599		服务端出现错误，常用500
