<?xml version="1.0" encoding="UTF-8"?>

<!-- 约束和xml文件写在同一个文件中 -->
<!DOCTYPE root[
	<!ELEMENT root      (student+,table)>   
	<!ELEMENT student   (name,age)>
	<!ELEMENT name      (#PCDATA)>
	<!ELEMENT age       (#PCDATA)>
	<!ATTLIST table 
		id      ID		#REQUIRED
		width	CDATA	#REQUIRED
		height  CDATA	#IMPLIED
		color	CDATA	#FIXED "白色"
		weight	CDATA	"20"
	>
]>

<root>
	<student>					<!-- 复杂元素 -->
		<name>张三</name>		<!-- 简单元素 -->
		<age>30</age>	
	</student>
	<student>
		<name>李四</name>
		<age>31</age>	
	</student>
	
	<table id="T20141127" width="60" height="70" color="白色" weight="30"> </table>
</root>

<!--
	dtd了解就好

	约束的意义：		
		xml的内容里，如果一个student里面有两个name标签，虽然语法上没什么问题，但是生活中不可能出现，没意义，所以需要有东西来约束;
		
	xml文档的两种约束
		DTD:  		语法自成一派，早期出现，可读性比较差；							
		Schema:		其实就是一个xml，使用xml的语法规则，xml解析器解析起来比较方便；
					Schema的是为了替代DTD，但它要写的东西比DTD多，so目前也没真正替代；
					
	DTD约束的引用
		1.引用网络上的； (ctrl+/ )
			<!DOCTYPE 根标签名 PUBLIC "//UNKNOWN/" "unknown.dtd">   
				public:			网络上的dtd;	
				//UNKNOWN/:		网络上dtd名称;	
				unknown.dtd:	网络上dtd的路径
			大范围大公司内使用,例如：struts框架。。。hibernate的配置文件里面用的就是网络上的DTD
		2.引用同一个包里的.dtd文件；
			<!DOCTYPE 根标签名 SYSTEM "04_DTD.dtd">	  SYSTEM:表示引入本地的dtd
			个人或组织，小范围内使用
		3.约束和xml文件写在同一个文件中
			还是建议分开写；约束一引用，你要是不符合约束，xml文件里面就会报错；
-->

<!--		
	DTD语法：
		所有在XML中的标签都得在DTD中申明完才行；

		标签约束：		
			<!ELEMENT root (student+)>   表示<root>下面有<student>
				(student+)	有+代表有1个或者多个student，没有+就只有一个student；
				(student?)	出现0次或1次；
				(student*)	出现0次活N次；
				(name,age)*	*在外面表示括号里面的可以出现N次
			
			<!ELEMENT student (name,age)>  
				<student>下面有两个元素，name和age，并且顺序也要name先;
				","表示得按此顺序；如果空格，表示顺序可以随意;
			
			<!ELEMENT age (real|virtual)> 
				<age><real></real></age>可以
				<age><virtual></virtual></age>也可以
				real或者virtual，"|"表示任选其一；	
			
			<!ELEMENT name (#PCDATA)>  
				#PCDATA    文本字符串
				
			<!ELEMENT alias EMPTY>
				 这个元素是空值 <alias></alias>（也可以写成<alias\>）;EMPTY小写是不行的；
			 
			<!ELEMENT alias  ANY>  
				ANY表示元素类型任意(也可以是空)；
				也可以是加个a类型，但是同时得声明从类型；这个太活，建议少用；
				
			<!ELEMENT a (#PCDATA)>  
				<alias>	 <a>dd</a>	</alias>
		
		属性约束
			<!ATTLIST table	     								
					id		ID		#REQUIRED				ID			只能由字母、下划线开始，不能出现空白字符；
					width	CDATA	#REQUIRED				#REQUIRED	必须要有这个属性	
					height  CDATA	#IMPLIED				#IMPLIED	可有可无的属性
					color	CDATA	#FIXED "白色"  			#FIXED		要么没有这属性，有的话值必须是白色
					weight	CDATA	"20"					"默认值"		可有可无，如果没有，用默认值补充，有的话用新值替代旧值；
					make	CDATA	(50|60|70)"60"			枚举类型		make默认是60，但是可以在括号里面选一个；
			>
			属性类型: ID(值为唯一的)、 CDATA(普通文本字符串)	
			属性约束: #REQUIRED、#IMPLIED、#FIXED "白色"；
			<table id="T20141127" width="60" height="70" color="白色" weight="30" make="70">
 	
 		实体约束
 			当页面出现多个相同的字符串，此时可以使用引用实体来解决
 			<!ENTITY	CCTV	"中国中央电视台">			在DTD中定义实体CCTV，值是"中国中央电视台"
 			<root><电视台>$CCTV</电视台></root>				在XML中使用，用$实体表示值；
 			
 			参数实体，定义DTD的时候，出现相同的子元素的时候就可以用参数实体
 			<!ENTITY % TIP "姓名">					在DTD中定义
 			<!ELEMENT root   (客户,员工)>
 			<!ELEMENT 客户	 (%TIP;)>				%TIP; 代表姓名;	
 			<!ELEMENT 员工      (%TIP;)>				在DTD中使用
 			<!ELEMENT 姓名      (#PCDATA)>
-->